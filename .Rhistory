View(tmFile)
"Tipovi podataka"
sapply(tmFile, class)
#Promjena podataka
tmFile = tmFile %>% mutate(tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id))
summary(tmFile)
for (col_name in names(tmFile)){
if (sum(is.na(tmFile[,col_name])) > 0){
cat('Ukupno nedostajućih vrijednosti za varijablu ',col_name, ': ', sum(is.na(tmFile[,col_name])),'\n')
}
}
## Problem 1
Možemo li nešto zaključiti iz distribucije visine najboljih deset igrača u posljednjih 30 godina u odnosu na distribuciju visine igrača koji nisu bili tako uspješni?
tennisMaches = select(tennisMaches, -c("winner_seed", "loser_seed"))
#Učitavanje podataka
tennisMaches = read.csv('tennis_atp_matches.csv')
"Dimenzija podataka"
dim(tennisMaches)
"Stupci"
names(tennisMaches)
library(dplyr)
library(tidyverse)
#Učitavanje podataka
tennisMaches = read.csv('tennis_atp_matches.csv')
"Dimenzija podataka"
dim(tennisMaches)
"Stupci"
names(tennisMaches)
#Prikaz podataka
View(tennisMaches)
"Tipovi podataka"
sapply(tennisMaches, class)
#Promjena podataka
tennisMaches = tennisMaches %>% mutate(tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id))
summary(tennisMaches)
for (col_name in names(tennisMaches)){
if (sum(is.na(tennisMaches[,col_name])) > 0){
cat('Ukupno nedostajućih vrijednosti za varijablu ',col_name, ': ', sum(is.na(tennisMaches[,col_name])),'\n')
}
}
tennisMaches = select(tennisMaches, -c("winner_seed", "loser_seed"))
dim(loser_seed)
tennisMaches = select(tennisMaches, -c("winner_seed", "loser_seed"))
library(dplyr)
library(tidyverse)
#Učitavanje podataka
tennisMaches = read.csv('tennis_atp_matches.csv')
"Dimenzija podataka"
dim(tennisMaches)
"Stupci"
names(tennisMaches)
#Prikaz podataka
View(tennisMaches)
"Tipovi podataka"
sapply(tennisMaches, class)
#Promjena podataka
tennisMaches = tennisMaches %>% mutate(tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id))
summary(tennisMaches)
for (col_name in names(tennisMaches)){
if (sum(is.na(tennisMaches[,col_name])) > 0){
cat('Ukupno nedostajućih vrijednosti za varijablu ',col_name, ': ', sum(is.na(tennisMaches[,col_name])),'\n')
}
}
tennisMaches = select(tennisMaches, -c("winner_seed", "loser_seed"))
dim(tennisMaches)
#Prikaz podataka
View(tennisMaches)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
library(dplyr)
library(tidyverse)
tennisMatches = read.csv('tennis_atp_matches.csv')
"Dimenzija podataka"
dim(tennisMatches)
"Stupci"
names(tennisMatches)
#Prikaz podataka
View(tennisMatches)
sapply(tennisMatches, class)
tennisMatches = tennisMatches %>% mutate(tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id))
summary(tennisMatches)
for (col_name in names(tennisMatches)){
if (sum(is.na(tennisMatches[,col_name])) > 0){
cat('Ukupno nedostajućih vrijednosti za varijablu ',col_name, ': ', sum(is.na(tennisMatches[,col_name])),'\n')
}
}
tennisMatches = select(tennisMatches, -c("winner_seed", "loser_seed"))
dim(tennisMatches)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
dim(topTenHeight)
summary(topTenHeight)
head(topTenHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
dim(topTenWinnerHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
dim(topTenWinnerHeight)
sapply(topTenHeight, class)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
dim(topTenWinnerHeight)
class(topTenHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
length(topTenHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
length(topTenWinnerHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = union(topTenWinnerHeight, topTenLosserHeight)
length(topTenLosserHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
length(topTenLosserHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
length(topTenHeight)
summary(topTenWinnerHeight)
head(topTenWinnerHeight)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
length(notTopTenHeight)
summary(notTopTenHeight)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight),]
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight)
help("hist")
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
br = seq(min(topTenHeight) - 0.5,max(topTenHeight) + 0.5,1)
hist(topTenHeight, breaks = br)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
players = tennisMatches[tennisMatches$winner_ht > 180 && tennisMatches$winner_ht < 182]$winner_ht
length(players)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight)
# QQ-dijagram
qqnorm(topTenHeight, pch = 1, frame=FALSE, main="Visina top deset najboljih igrača")
qqline(tmFile$winner_ht, col="steelblue", lwd=2)
# QQ-dijagram
qqnorm(topTenHeight, pch = 1, frame=FALSE, main="Visina top deset najboljih igrača")
qqline(topTenHeight, col="steelblue", lwd=2)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
fifa19 = read.csv("C:\\ksfa\\5.semestar\\sap\\aud\\2.auditorna_vjezba\\players_19.csv")
dim(fifa19)
names(fifa19)
View(fifa19)
fifa19 = select(fifa19, -c("player_url","long_name","real_face","player_tags","loaned_from","player_traits"))
dim(fifa19)
summary(fifa19)
sapply(fifa19, class)
for (col_name in names(fifa19)){
if (sum(is.na(fifa19[,col_name])) > 0){
cat('Ukupno nedostajućih vrijednosti za varijablu ',col_name, ': ', sum(is.na(fifa19[,col_name])),'\n')
}
}
cat('\n Dimenzija podataka: ', dim(fifa19))
fifa19 = select(fifa19, -c("nation_jersey_number"))
dim(fifa19)
hist(fifa19$weight_kg,main='Weight in kg histogram', xlab='Weight', ylab='Frequency')
hist(fifa19$height_cm,main='Height in cm histogram', xlab='Height', ylab='Frequency')
hist(fifa19$value_eur,main='Value in eur histogram',xlab='Value',ylab='Frequency', breaks=50)
hist(fifa19$wage_eur,main='Wage in eur histogram',xlab='Wage',ylab='Frequency', breaks=50)
hist(log(fifa19$value_eur),main='Value in eur histogram',xlab='Value',ylab='Frequency', breaks=50)
hist(log(fifa19$wage_eur),main='Wage in eur histogram',xlab='Wage',ylab='Frequency', breaks=20)
barplot(summary(fifa19$nationality),las=2,cex.names=.5,main='Nationality of players')
qqnorm(croatian_players$height_cm, pch = 1, frame = FALSE,main='Croatian players')
croatian_players = fifa19[fifa19$nationality == "Croatia",]
spanish_players = fifa19[fifa19$nationality == "Spain",]
qqnorm(croatian_players$height_cm, pch = 1, frame = FALSE,main='Croatian players')
qqline(croatian_players$height_cm, col = "steelblue", lwd = 2)
qqnorm(spanish_players$height_cm, pch = 1, frame = FALSE,main='Spanish players')
qqline(spanish_players$height_cm, col = "steelblue", lwd = 2)
# QQ-dijagram
qqnorm(topTenHeight, pch = 1, frame=FALSE, main="Visina top deset najboljih igrača")
qqline(topTenHeight, col="steelblue", lwd=2)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 8)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 12)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 15)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 20)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 16)
# QQ-dijagram
qqnorm(notTopTenHeight, pch = 1, frame=FALSE, main="Visina igrača koji nisu u top deset najboljih")
qqline(notTopTenHeight, col="steelblue", lwd=2)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
var.test(varTopTen, varNotTopTen)
var.test(varTopTen, varNotTopTen)
var.test(topTenHeight, notTopTenHeight)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
cat('Varijanca top deset najboljih igrača: ', varTopTen)
cat('Varijanca igrača izvan top deset najboljih: ', varNotTopTen)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
cat('Varijanca top deset najboljih igrača: ', varTopTen, '\n')
cat('Varijanca igrača izvan top deset najboljih: ', varNotTopTen)
help("t.test")
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
t.test(notTopTenHeight, topTenHeight, alt = "greater", var.equal = FALSE)
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, xlab="Visina top deset najboljih igrača")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača koji nisu u top deset najboljih", main="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača", main="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight,  xlab="Visina igrača", ylab="Frekvencija" main="Visina igrača koji su u top deset najboljih")
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight,  xlab="Visina igrača", ylab="Frekvencija", main="Visina igrača koji su u top deset najboljih")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača", ylab="Frekvencija", main="Visina igrača koji nisu u top deset najboljih")
class(tennisMatches$score)
wonFirstSetAndMatch = tennisMatches[tennisMatches$]
tennisMatches$score[1].substr(0,3)
tennisMatches[1]$score.substr(0,3)
tennisMatches[1]$score.substr(1,4)
tennisMatches[,1]$score.substr(1,4)
tennisMatches$score[1].substr(1,4)
substr(tennisMatches[1]$score, 1,4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches[2]$score, 1,4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches[2]$score, 1 , 4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 3)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 2)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 3 , 3)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(1,1) > tennisMatches$score.substr(3,3)]
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(1,1) > tennisMatches$score.substr(3,3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
length(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
length(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatch)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatch)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(wonFirstSetAndMatch)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
sum(is.na(tennisMatches$score))
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[is.numeric(substr(tennisMatches$score, 1, 1), ]
tennisMatchesSet = tennisMatches[is.numeric(substr(tennisMatches$score, 1, 1)), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.numeric(substr(tennisMatches$score, 1, 1)), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[is.number(substr(tennisMatches$score, 1, 1)), ]
tennisMatchesSet = tennisMatches[!is.na(as.number(substr(tennisMatches$score, 1, 1))), ]
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) < substr(tennisMatchesSet$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) > substr(tennisMatchesSet$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) < substr(tennisMatchesSet$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
