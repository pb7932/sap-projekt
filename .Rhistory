summary(topTenHeight)
hist(topTenHeight, breaks = 15)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 20)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, breaks = 16)
# QQ-dijagram
qqnorm(notTopTenHeight, pch = 1, frame=FALSE, main="Visina igrača koji nisu u top deset najboljih")
qqline(notTopTenHeight, col="steelblue", lwd=2)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
var.test(varTopTen, varNotTopTen)
var.test(varTopTen, varNotTopTen)
var.test(topTenHeight, notTopTenHeight)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
cat('Varijanca top deset najboljih igrača: ', varTopTen)
cat('Varijanca igrača izvan top deset najboljih: ', varNotTopTen)
varTopTen = var(topTenHeight)
varNotTopTen = var(notTopTenHeight)
cat('Varijanca top deset najboljih igrača: ', varTopTen, '\n')
cat('Varijanca igrača izvan top deset najboljih: ', varNotTopTen)
help("t.test")
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
t.test(notTopTenHeight, topTenHeight, alt = "greater", var.equal = FALSE)
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, xlab="Visina top deset najboljih igrača")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača koji nisu u top deset najboljih", main="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
summary(notTopTenHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača", main="Visina igrača koji nisu u top deset najboljih")
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight,  xlab="Visina igrača", ylab="Frekvencija" main="Visina igrača koji su u top deset najboljih")
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight = tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight = tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight = append(topTenWinnerHeight, topTenLosserHeight)
summary(topTenWinnerHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight = topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight,  xlab="Visina igrača", ylab="Frekvencija", main="Visina igrača koji su u top deset najboljih")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight = tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight = tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight = append(notTopTenWinnerHeight, noTopTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight = notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab="Visina igrača", ylab="Frekvencija", main="Visina igrača koji nisu u top deset najboljih")
class(tennisMatches$score)
wonFirstSetAndMatch = tennisMatches[tennisMatches$]
tennisMatches$score[1].substr(0,3)
tennisMatches[1]$score.substr(0,3)
tennisMatches[1]$score.substr(1,4)
tennisMatches[,1]$score.substr(1,4)
tennisMatches$score[1].substr(1,4)
substr(tennisMatches[1]$score, 1,4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches[2]$score, 1,4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches[2]$score, 1 , 4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 4)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 3)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 1 , 2)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(0,1) > tennisMatches$score.substr(2,3)]
substr(tennisMatches$score, 3 , 3)
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(1,1) > tennisMatches$score.substr(3,3)]
wonFirstSetAndMatch = tennisMatches[tennisMatches$score.substr(1,1) > tennisMatches$score.substr(3,3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
length(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
length(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[, substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3)]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatch = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatch)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(wonFirstSetAndMatch)[1]
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatch)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(wonFirstSetAndMatch)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
sum(is.na(tennisMatches$score))
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[is.numeric(substr(tennisMatches$score, 1, 1), ]
tennisMatchesSet = tennisMatches[is.numeric(substr(tennisMatches$score, 1, 1)), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.numeric(substr(tennisMatches$score, 1, 1)), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[is.number(substr(tennisMatches$score, 1, 1)), ]
tennisMatchesSet = tennisMatches[!is.na(as.number(substr(tennisMatches$score, 1, 1))), ]
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatches[substr(tennisMatches$score, 1, 1) < substr(tennisMatches$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) > substr(tennisMatches$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) < substr(tennisMatchesSet$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
tennisMatchesSet = tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
dim(tennisMatchesSet)
wonFirstSetAndMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) > substr(tennisMatchesSet$score, 3, 3), ]
wonFirstSetAndMatchCount = dim(wonFirstSetAndMatchMatches)[1]
lostFirstSetAnWonMatchMatches = tennisMatchesSet[substr(tennisMatchesSet$score, 1, 1) < substr(tennisMatchesSet$score, 3, 3), ]
lostFirstSetAndWonMatchCount = dim(lostFirstSetAnWonMatchMatches)[1]
dim(tennisMatches)
wonFirstSetAndMatchCount + lostFirstSetAndWonMatchCount
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
tennisMatches <- read.csv("tennis_atp_matches.csv")
dim(tennisMatches)
names(tennisMatches)
View(tennisMatches)
sapply(tennisMatches, class)
tennisMatches <- tennisMatches %>% mutate(
tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id)
)
summary(tennisMatches)
for (col_name in names(tennisMatches)) {
if (sum(is.na(tennisMatches[, col_name])) > 0) {
cat("Ukupno nedostajućih vrijednosti za varijablu ", col_name, ": ", sum(is.na(tennisMatches[, col_name])), "\n")
}
}
tennisMatches <- select(tennisMatches, -c("winner_seed", "loser_seed"))
dim(tennisMatches)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight <- tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight <- tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight <- append(topTenWinnerHeight, topTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight <- topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, xlab = "Visina igrača", ylab = "Frekvencija", main = "Visina igrača koji su u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight <- tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight <- tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight <- append(notTopTenWinnerHeight, noTopTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight <- notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab = "Visina igrača", ylab = "Frekvencija", main = "Visina igrača koji nisu u top deset najboljih")
# QQ-dijagram
qqnorm(topTenHeight, pch = 1, frame = FALSE, main = "Visina top deset najboljih igrača")
qqline(topTenHeight, col = "steelblue", lwd = 2)
# QQ-dijagram
qqnorm(notTopTenHeight, pch = 1, frame = FALSE, main = "Visina igrača koji nisu u top deset najboljih")
qqline(notTopTenHeight, col = "steelblue", lwd = 2)
varTopTen <- var(topTenHeight)
varNotTopTen <- var(notTopTenHeight)
cat("Varijanca top deset najboljih igrača: ", varTopTen, "\n")
cat("Varijanca igrača izvan top deset najboljih: ", varNotTopTen)
var.test(topTenHeight, notTopTenHeight)
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
# Uklanjanje mečeva kojima je score W/O
tennisMatchesSet <- tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
#Izdvajanje rezultata
scores <- tennisMatchesSet$score
#Dohvaćanje prvog seta
firstSet <- substr(scores, 1, 3)
eFunc <- function(strSet){
wScore = as.numeric(substr(strSet, 1 , 1))
lScore = as.numeric(substr(strSet, 3,3))
if(wScore > lScore){
#W je pobijedio prvi set
return(1)
}else if(lScore > wScore){
#L je dobio prvi set
return(-1)
}else{
return(0)
}
}
extractedData <- c()
for(i in firstSet){
extractedData <- c(extractedData, eFunc(i))
}
t.test(extractedData, alt="greater")
aseviUpareni <- c(tennisMatches$w_ace - tennisMatches$l_ace)
qqnorm(aseviUpareni, pch = 1, frame = FALSE, main = "Brojevi aseva W - L")
qqline(aseviUpareni, col = "steelblue", lwd = 2)
hist(aseviUpareni, main = "Broj aseva W - L", xlab = "Razlika aseva", ylab = "Frekvenicja")
summary(aseviUpareni)
boxplot(aseviUpareni)
# Provedba t testa
t.test(aseviUpareni, alt = "greater")
brojDobivenogPrvogServisaPobjednik <- tennisMatches$w_1stWon
brojDobivenogPrvogServisaGubitnik <- tennisMatches$l_1stWon
# uklanjanje nedostajećih vrijednosti
brojDobivenogPrvogServisaPobjednik <- na.omit(brojDobivenogPrvogServisaPobjednik)
brojDobivenogPrvogServisaGubitnik <- na.omit(brojDobivenogPrvogServisaGubitnik)
cat("Pregled podataka o broju dobivenog prvog servisa pobjednika\n")
summary(brojDobivenogPrvogServisaPobjednik)
cat("\nPregled podataka o broju dobivenog prvog servisa gubitnika\n")
summary(brojDobivenogPrvogServisaGubitnik)
Q_w <- quantile(brojDobivenogPrvogServisaPobjednik, probs = c(.1, .9))
iqr_w <- IQR(brojDobivenogPrvogServisaPobjednik) / 1.349
Q_l <- quantile(brojDobivenogPrvogServisaGubitnik, probs = c(.1, .9))
iqr_l <- IQR(brojDobivenogPrvogServisaGubitnik) / 1.349
tennisMatchesPrviServis <- subset(
tennisMatches,
tennisMatches$w_1stWon > (Q_w[1] - 1.5 * iqr_w) &
tennisMatches$w_1stWon < (Q_w[2] + 1.5 * iqr_w) &
tennisMatches$l_1stWon > (Q_l[1] - 1.5 * iqr_l) &
tennisMatches$l_1stWon < (Q_l[2] + 1.5 * iqr_l)
)
# brojDobivenogPrvogServisaPobjednik = subset(brojDobivenogPrvogServisaPobjednik,                     brojDobivenogPrvogServisaPobjednik > (Q[1] - 1.5*iqr) &
#        brojDobivenogPrvogServisaPobjednik < (Q[2] + 1.5*iqr))
# brojDobivenogPrvogServisaGubitnik = subset(brojDobivenogPrvogServisaGubitnik,                       brojDobivenogPrvogServisaGubitnik > (Q[1] - 1.5*iqr) &
#        brojDobivenogPrvogServisaGubitnik < (Q[2] + 1.5*iqr))
# brojDobivenogPrvogServisaGubitnik = head(brojDobivenogPrvogServisaGubitnik, length(brojDobivenogPrvogServisaPobjednik) - length(brojDobivenogPrvogServisaGubitnik))
cat("Pregled podataka o broju dobivenog prvog servisa pobjednika\n")
summary(tennisMatchesPrviServis$w_1stWon)
cat("\nPregled podataka o broju dobivenog prvog servisa gubitnika\n")
summary(tennisMatchesPrviServis$l_1stWon)
upareniBrojDobivenogPrvogServisa <- c(brojDobivenogPrvogServisaPobjednik - brojDobivenogPrvogServisaGubitnik)
hist(upareniBrojDobivenogPrvogServisa,
breaks = 40,
xlab = "Upareni broj dobivenog prvog servisa",
ylab = "Broj ishoda",
main = "Distribucija uparenih podataka broja dobivenog prvog servisa"
)
hist(brojDobivenogPrvogServisaPobjednik,
xlim = c(0, 50),
breaks = 80,
xlab = "Broj dobivenog prvog servisa",
ylab = "Broj pobjednika",
main = "Distribucija broja dobivenog prvog servisa pobjednika"
)
hist(brojDobivenogPrvogServisaGubitnik,
xlim = c(0, 50),
breaks = 80,
xlab = "Broj dobivenog prvog servisa",
ylab = "Broj gubitnika",
main = "Distribucija broja dobivenog prvog servisa gubitnika"
)
qqnorm(upareniBrojDobivenogPrvogServisa,
pch = 1,
frame = FALSE,
main = "Upareni podaci broja dobivenog prvog servisa pobjednika i gubitnika"
)
qqline(upareniBrojDobivenogPrvogServisa, col = "steelblue", lwd = 2)
varPobjednik <- var(brojDobivenogPrvogServisaPobjednik)
varGubitnik <- var(brojDobivenogPrvogServisaGubitnik)
cat("Varijanca broja dobivenog prvog servisa pobjednika: ", varPobjednik, "\n")
cat("Varijanca broja dobivenog prvog servisa gubitnika: ", varGubitnik, "\n")
var.test(brojDobivenogPrvogServisaPobjednik, brojDobivenogPrvogServisaGubitnik)
t.test(upareniBrojDobivenogPrvogServisa,
alternative = "greater",
var.equal = FALSE
)
# t.test(brojDobivenogPrvogServisaPobjednik
#       , brojDobivenogPrvogServisaGubitnik
#       , alternative = "greater"
#       , var.equal = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyverse)
tennisMatches <- read.csv("tennis_atp_matches.csv")
dim(tennisMatches)
names(tennisMatches)
View(tennisMatches)
sapply(tennisMatches, class)
tennisMatches <- tennisMatches %>% mutate(
tourney_date = as.Date(as.character(tourney_date), "%Y%m%d"),
winner_id = as.factor(winner_id),
loser_id = as.factor(loser_id)
)
summary(tennisMatches)
for (col_name in names(tennisMatches)) {
if (sum(is.na(tennisMatches[, col_name])) > 0) {
cat("Ukupno nedostajućih vrijednosti za varijablu ", col_name, ": ", sum(is.na(tennisMatches[, col_name])), "\n")
}
}
tennisMatches <- select(tennisMatches, -c("winner_seed", "loser_seed"))
dim(tennisMatches)
# Spremanje visina igrača koji su u trenutku igranja meča u top deset najboljih
topTenWinnerHeight <- tennisMatches[tennisMatches$winner_rank <= 10, ]$winner_ht
topTenLosserHeight <- tennisMatches[tennisMatches$loser_rank <= 10, ]$loser_ht
topTenHeight <- append(topTenWinnerHeight, topTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
topTenHeight <- topTenHeight[complete.cases(topTenHeight)]
summary(topTenHeight)
hist(topTenHeight, xlab = "Visina igrača", ylab = "Frekvencija", main = "Visina igrača koji su u top deset najboljih")
# Spremanje visina igrača koji u trenutku igranja meča nisu u top deset najboljih
notTopTenWinnerHeight <- tennisMatches[tennisMatches$winner_rank > 10, ]$winner_ht
noTopTenLosserHeight <- tennisMatches[tennisMatches$loser_rank > 10, ]$loser_ht
notTopTenHeight <- append(notTopTenWinnerHeight, noTopTenLosserHeight)
# Odbacivanje nedostajećih vrijednosti
notTopTenHeight <- notTopTenHeight[complete.cases(notTopTenHeight)]
summary(notTopTenHeight)
hist(notTopTenHeight, xlab = "Visina igrača", ylab = "Frekvencija", main = "Visina igrača koji nisu u top deset najboljih")
# QQ-dijagram
qqnorm(topTenHeight, pch = 1, frame = FALSE, main = "Visina top deset najboljih igrača")
qqline(topTenHeight, col = "steelblue", lwd = 2)
# QQ-dijagram
qqnorm(notTopTenHeight, pch = 1, frame = FALSE, main = "Visina igrača koji nisu u top deset najboljih")
qqline(notTopTenHeight, col = "steelblue", lwd = 2)
varTopTen <- var(topTenHeight)
varNotTopTen <- var(notTopTenHeight)
cat("Varijanca top deset najboljih igrača: ", varTopTen, "\n")
cat("Varijanca igrača izvan top deset najboljih: ", varNotTopTen)
var.test(topTenHeight, notTopTenHeight)
t.test(topTenHeight, notTopTenHeight, alt = "greater", var.equal = FALSE)
# Uklanjanje mečeva kojima je score W/O
tennisMatchesSet <- tennisMatches[!is.na(as.numeric(substr(tennisMatches$score, 1, 1))), ]
#Izdvajanje rezultata
scores <- tennisMatchesSet$score
#Dohvaćanje prvog seta
firstSet <- substr(scores, 1, 3)
eFunc <- function(strSet){
wScore = as.numeric(substr(strSet, 1 , 1))
lScore = as.numeric(substr(strSet, 3,3))
if(wScore > lScore){
#W je pobijedio prvi set
return(1)
}else if(lScore > wScore){
#L je dobio prvi set
return(-1)
}else{
return(0)
}
}
extractedData <- c()
for(i in firstSet){
extractedData <- c(extractedData, eFunc(i))
}
t.test(extractedData, alt="greater")
aseviUpareni <- c(tennisMatches$w_ace - tennisMatches$l_ace)
qqnorm(aseviUpareni, pch = 1, frame = FALSE, main = "Brojevi aseva W - L")
qqline(aseviUpareni, col = "steelblue", lwd = 2)
hist(aseviUpareni, main = "Broj aseva W - L", xlab = "Razlika aseva", ylab = "Frekvenicja")
summary(aseviUpareni)
boxplot(aseviUpareni)
# Provedba t testa
t.test(aseviUpareni, alt = "greater")
brojDobivenogPrvogServisaPobjednik <- tennisMatches$w_1stWon
brojDobivenogPrvogServisaGubitnik <- tennisMatches$l_1stWon
# uklanjanje nedostajećih vrijednosti
brojDobivenogPrvogServisaPobjednik <- na.omit(brojDobivenogPrvogServisaPobjednik)
brojDobivenogPrvogServisaGubitnik <- na.omit(brojDobivenogPrvogServisaGubitnik)
cat("Pregled podataka o broju dobivenog prvog servisa pobjednika\n")
summary(brojDobivenogPrvogServisaPobjednik)
cat("\nPregled podataka o broju dobivenog prvog servisa gubitnika\n")
summary(brojDobivenogPrvogServisaGubitnik)
Q_w <- quantile(brojDobivenogPrvogServisaPobjednik, probs = c(.1, .9))
iqr_w <- IQR(brojDobivenogPrvogServisaPobjednik) / 1.349
Q_l <- quantile(brojDobivenogPrvogServisaGubitnik, probs = c(.1, .9))
iqr_l <- IQR(brojDobivenogPrvogServisaGubitnik) / 1.349
tennisMatchesPrviServis <- subset(
tennisMatches,
tennisMatches$w_1stWon > (Q_w[1] - 1.5 * iqr_w) &
tennisMatches$w_1stWon < (Q_w[2] + 1.5 * iqr_w) &
tennisMatches$l_1stWon > (Q_l[1] - 1.5 * iqr_l) &
tennisMatches$l_1stWon < (Q_l[2] + 1.5 * iqr_l)
)
# brojDobivenogPrvogServisaPobjednik = subset(brojDobivenogPrvogServisaPobjednik,                     brojDobivenogPrvogServisaPobjednik > (Q[1] - 1.5*iqr) &
#        brojDobivenogPrvogServisaPobjednik < (Q[2] + 1.5*iqr))
# brojDobivenogPrvogServisaGubitnik = subset(brojDobivenogPrvogServisaGubitnik,                       brojDobivenogPrvogServisaGubitnik > (Q[1] - 1.5*iqr) &
#        brojDobivenogPrvogServisaGubitnik < (Q[2] + 1.5*iqr))
# brojDobivenogPrvogServisaGubitnik = head(brojDobivenogPrvogServisaGubitnik, length(brojDobivenogPrvogServisaPobjednik) - length(brojDobivenogPrvogServisaGubitnik))
cat("Pregled podataka o broju dobivenog prvog servisa pobjednika\n")
summary(tennisMatchesPrviServis$w_1stWon)
cat("\nPregled podataka o broju dobivenog prvog servisa gubitnika\n")
summary(tennisMatchesPrviServis$l_1stWon)
upareniBrojDobivenogPrvogServisa <- c(brojDobivenogPrvogServisaPobjednik - brojDobivenogPrvogServisaGubitnik)
hist(upareniBrojDobivenogPrvogServisa,
breaks = 40,
xlab = "Upareni broj dobivenog prvog servisa",
ylab = "Broj ishoda",
main = "Distribucija uparenih podataka broja dobivenog prvog servisa"
)
hist(brojDobivenogPrvogServisaPobjednik,
xlim = c(0, 50),
breaks = 80,
xlab = "Broj dobivenog prvog servisa",
ylab = "Broj pobjednika",
main = "Distribucija broja dobivenog prvog servisa pobjednika"
)
hist(brojDobivenogPrvogServisaGubitnik,
xlim = c(0, 50),
breaks = 80,
xlab = "Broj dobivenog prvog servisa",
ylab = "Broj gubitnika",
main = "Distribucija broja dobivenog prvog servisa gubitnika"
)
qqnorm(upareniBrojDobivenogPrvogServisa,
pch = 1,
frame = FALSE,
main = "Upareni podaci broja dobivenog prvog servisa pobjednika i gubitnika"
)
qqline(upareniBrojDobivenogPrvogServisa, col = "steelblue", lwd = 2)
varPobjednik <- var(brojDobivenogPrvogServisaPobjednik)
varGubitnik <- var(brojDobivenogPrvogServisaGubitnik)
cat("Varijanca broja dobivenog prvog servisa pobjednika: ", varPobjednik, "\n")
cat("Varijanca broja dobivenog prvog servisa gubitnika: ", varGubitnik, "\n")
var.test(brojDobivenogPrvogServisaPobjednik, brojDobivenogPrvogServisaGubitnik)
t.test(upareniBrojDobivenogPrvogServisa,
alternative = "greater",
var.equal = FALSE
)
# t.test(brojDobivenogPrvogServisaPobjednik
#       , brojDobivenogPrvogServisaGubitnik
#       , alternative = "greater"
#       , var.equal = FALSE)
